### Should add this!
class Node(object):
    def __init__(self, data=None, next_node=None, prev_node=None):
        self.data = data
        self.next = next_node
        self.prev = prev_node
        
def sortedInsert(head, data):
    newNode = Node(data=data)
    
    if data < head.data:
        print(f"If insert at the first node.")
        head.prev = newNode
        newNode.next = head
        newNode.prev = None
        return newNode
    
    print(f"If insert not at the first node.")
    prev_ll_now = head
    while prev_ll_now.data <= data and prev_ll_now.next != None and prev_ll_now.next.data <= data:
        prev_ll_now = prev_ll_now.next
    next_ll = prev_ll_now.next ### 1. prev_ll_now 2. newNode 3. next_ll
    
    newNode.prev = prev_ll_now # [1-1] Set prev_ll_now <- newNode
    prev_ll_now.next = newNode # [1-2] Set prev_ll_now -> newNode
    if next_ll != None:
        newNode.next = next_ll # [2-1] Set newNode -> next_ll
        next_ll.prev = newNode # [2-2] Set newNode <- next_ll
    return head




########################################################################################
def sortedInsert(head, data):
    newNode = Node(data=data)
    
    ### If insert head
    if data < head.data:
        head.prev = data
        newNode.next = head
        newNode.prev = None
        return newNode
    
    ### If not insert head
    current_node = head
    while data > current_node.data and current_node.next != None and current_node.next.data <= data:
        current_node = current_node.next
    prev_tmp_node = current_node
    next_tmp_node = current_node.next
    
    newNode.prev = prev_tmp_node # [1-1] Set prev_ll_now <- newNode
    prev_tmp_node.next = newNode # [1-2] Set prev_ll_now -> newNode
    if next_tmp_node != None:
        newNode.next = next_tmp_node # [2-1] Set newNode -> next_ll
        next_tmp_node.prev = newNode # [2-2] Set newNode <- next_ll
    return head
